<p>The Tcl language allows multiple interpreters within a single
  program and moreover provides for the ability to run code inside a
  <a href="http://www.tcl.tk/man/tcl8.6/TclCmd/interp.htm#M43">safe</a>
  interpreter that, for security reasons, can be restricted in terms
  of the commands it can execute. For example, commands that execute
  programs or write to disk can be either disabled or enabled with
  restrictions. The purpose of running code in a safe interpreter is
  to make it harder for an attacker to penetrate or damage the system even
  in the presence of programming bugs and security holes. See
  [my _chapter_link security] for more details.</p>

<p>Woof! makes use of this very useful Tcl capability by splitting the
  runtime environment between two interpreters:</p>
<ul>
  <li>The <em>master</em> interpreter is created when Woof! is started
    and is privileges to execute all Tcl commands. The master
    interpreter reads the configuration, initializes web server
    interfaces and various subsystems.</li>
  <li>The <em>application</em> interpreter is a safe interpreter. It
    is created by the master interpreter which also loads most of the
    Woof! runtime packages into it
    including the <span class="wf_code">woof</span> package.
    The master interpreter also creates various
    aliased commands, such as those for the web server interfaces and
    logging, in the application interpreter.
  </li>
</ul>
  
<p>When a client request arrives, the master interpreter receives it
  from the web server and passes it into the safe application
  interpreter. The application interpreter processes the request and
  then calls the web server interfaces to return the response to the
  client.</p>

<p>The advantage of this model of processing is that most of the
  processing happens in an interpreter whose access to system
  resources such as the file system is limited. Serious damage caused
  by security-related vulnerabilities is therefore limited. This is by
  no means a panacea but affords some additional level of protection.</p>

<p><strong><em>To be documented - how to interface to master interpreter.</em></strong></p>
