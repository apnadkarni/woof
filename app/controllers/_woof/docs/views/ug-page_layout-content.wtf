<p>A layout defines the HTML&nbsp;page head and body sections and then
positions the various page sections within the body.</p>

<p>The following is a simple example of a layout:</p>

[my _code_sample {
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN">
  <html>
    <head>
      <title>Example Layout</title>
    </head>
    <body>
  % if {[page fetch header content]} {
       $content
       <hr/>
  % }
  % if {[page fetch main content]} {
       $content
  % }
  % if {[page exists footer content]} {
       <hr/>
       $content
  % }
    </body>
  </html>
}]

<p>The above layout is defined in
[my _chapter_link wtf] (WTF) containing a mixture of Tcl code and HTML 
markup. It starts with defining the standard HTML page headers. Within the body
element, the layout defines three sections - the header, the main
content and the footer. The contents of each section, if defined, are
expected to be in the <span class='wf_code'>page</span> object. Note
that the layout makes use of conditional Tcl statements to insert each
section only if they exist. The <span class='wf_code'>fetch</span>
method returns true if the page section exists and stores it in the
variable <span class='wf_code'>content</span>.
The [my _chapter_link page_object "<span class='wf_code'>page</span>"]
object, from which the HTML content is retrieved, is constructed when
building page sections.

<h3>Defining page sections in layouts</h3>

<p>In the above layout, only three sections are referenced. However,
Woof! itself does not impose any restrictions on the number and names
of the sections, or how they are positioned. The page object will
attempt to retrieve the content of each section based on the
controller and action specified in the client request and the name of
the section. The corresponding section content is either supplied by
the action method or generated from a page section template. It is up
to the application writer to ensure the appropriate named sections can
be generated.</p>

<h3>Processing layout templates</h3>

<p>A layout template is processed like as any
other [my _chapter_link wtf "Woof Template Format"] file. What
makes it different is really only the intended usage. By convention,
the layout template is primarily be concerned with positioning of
major HTML areas and providing standard headers. It then makes use of
the <span class='wf_code'>page</span> object
to retrieve the various page sections that contain the actual data,
both static and dynamically retrieved from a controller.</p>

<p>However, there is nothing that prevents a layout from containing
pure static HTML content, or directly accessing a controller's dynamic
content. This practice is not recommended but might be occasionally
used when a particular page does not follow a site's standard layout
and is simple enough that adding separate layout and page section
templates is not worthwhile.</p>

<h3>Locating layout templates</h3>

<p>When Woof! receives a client request with a URL that is mapped to a
controller <span class='wf_code'><em>CONTROLLER</em> </span>and
action <span class='wf_code'><em>ACTION</em></span>, it checks for the
existence of the
files <span class="woof_filename"><em>CONTROLLER-ACTION</em>-layout.wtf</span>
and <span class="woof_filename"><em>CONTROLLER</em>-layout.wtf</span>
in the <span class="woof_filename">views</span> subdirectory of the
directory where the controller module is located. If neither is found,
Woof! searches for a
file <span class="woof_filename">layout.wtf</span> in
all <span class="woof_filename">views </span>subdirectories starting
with the controller module directory and working upwards through all
parent module directories of the controller. The first file found is
used as the template for the layout.</p>

<h3>Sharing layout templates</h3>

<p>Pages within a web site, or within a specific area of a web site,
share common structure such as navigation bars, footers and so on. A
layout therefore may be, and generally is, shared between actions
within a controller and even across multiple controllers.</p>

<p>The method described above for locating layouts allows flexible
sharing of common layouts within, and between, controllers and
controller trees while simultaneously allowing special layouts for
specific controllers or even actions within a controller.</p>

